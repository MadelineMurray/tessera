plugins {
    id "java-library"
}

dependencies {
    implementation project(":tessera-core")
    implementation project(":tessera-context")
    implementation project(":security")
    implementation project(":tessera-partyinfo")
    implementation project(":tessera-dist")

    implementation project(":enclave:enclave-jaxrs")

    implementation project(":enclave:enclave-api")

    implementation project(":tessera-jaxrs:common-jaxrs")
    implementation project(":tessera-jaxrs:jaxrs-client")
    implementation project(":tessera-jaxrs:sync-jaxrs")
    implementation project(":tessera-jaxrs:partyinfo-model")
    implementation project(":server:jersey-server")

    implementation project(":shared")
    implementation project(":config")
 //   implementation project(":tests:test-util")

//    implementation project(":key-vault:aws-key-vault")
    implementation project(":key-vault:azure-key-vault")
//    implementation project(":key-vault:hashicorp-key-vault")

    implementation "jakarta.ws.rs:jakarta.ws.rs-api"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api"

    testImplementation project(":ddls")

    implementation "org.slf4j:slf4j-api"
    testRuntimeOnly "ch.qos.logback:logback-classic"
    testRuntimeOnly "ch.qos.logback:logback-core"
    testRuntimeOnly "org.slf4j:jcl-over-slf4j"
    testRuntimeOnly "org.slf4j:jul-to-slf4j"

    testImplementation ("io.cucumber:cucumber-junit:6.8.2") {
        exclude group: "com.github.jnr", module: "jffi"
    }
    testImplementation files("/Users/chris/.m2/repository/com/github/jnr/jffi/1.3.1-SNAPSHOT/jffi-1.3.1-SNAPSHOT-complete.jar")
    testImplementation files("/Users/chris/.m2/repository/com/github/jnr/jffi/1.3.1-SNAPSHOT/jffi-1.3.1-SNAPSHOT-native.jar")
    testImplementation "io.cucumber:cucumber-java8:6.8.2"

    testImplementation "org.xerial:sqlite-jdbc"
    testImplementation "org.hsqldb:hsqldb"

    //testImplementation "com.google.guava:guava:29.0-jre"

    testImplementation "jakarta.ws.rs:jakarta.ws.rs-api"
    testImplementation "org.assertj:assertj-core"
    testImplementation "com.github.jnr:jnr-unixsocket"
    testImplementation "org.glassfish:jakarta.el"

    testImplementation "org.bouncycastle:bcpkix-jdk15on"
    testImplementation "org.bouncycastle:bcprov-jdk15on"


    testRuntime "org.eclipse.persistence:org.eclipse.persistence.moxy"

    implementation "org.glassfish:jakarta.json"

    implementation project(":encryption:encryption-api")
    implementation project(":encryption:encryption-jnacl")
    implementation project(":encryption:encryption-ec")

}

test {

    systemProperty "application.jar","${buildDir}/unpacked/dist/tessera-"+ project.version +"/bin/tessera"

    systemProperty "enclave.jaxrs.server.jar","${buildDir}/unpacked/dist/enclave-jaxrs-"+ project.version +"/bin/enclave-jaxrs"
    systemProperty "jdbc.hsql.jar",project.configurations.testCompileClasspath.find { it.name.startsWith("hsqldb") }
    systemProperty "jdbc.sqlite.jar",project.configurations.testCompileClasspath.find { it.name.startsWith("sqlite-jdbc") }
    systemProperty "jdbc.dir","${buildDir}/ext"

    systemProperty "keyvault.aws.dist","${buildDir}/unpacked/dist/aws-key-vault-"+ project.version +"/lib/"
    systemProperty "keyvault.azure.dist","${buildDir}/unpacked/dist/azure-key-vault-"+ project.version +"/bin/tessera"
    systemProperty "keyvault.hashicorp.dist","${buildDir}/unpacked/dist/hashicorp-key-vault-"+ project.version +"/lib/"

    systemProperty "project.version", project.version

    include(
//            "**/RecoverIT.class",
//            "**/RestSuiteHttpH2RemoteEnclave.class",
//            "**/RestSuiteHttpHSQL.class",
   //         "**/RestSuiteUnixH2.class",
       //     "**/RestSuiteHttpSqllite.class",
  //          "**/RestSuiteHttpH2.class",
//            "**/SendWithRemoteEnclaveReconnectIT.class",
//            "**/CucumberWhitelistIT.class",
//            "**/P2pTestSuite.class",
//            "**/CucumberFileKeyGenerationIT.class",
     //       "**/RunAwsIT.class",
              "**/RunAzureIT.class",
         //   "**/MyTest.class"
    //        "**/RunHashicorpIT.class"

    )

    if (project.hasProperty('excludeTests')) {
        def tokens = project.property('excludeTests').split(",")
        tokens.each {v ->
            exclude "**/"+ v +".class";
        }
    }

}

task unzipAzureKeyVault(type: Copy) {
    def zipFile = file(project(":key-vault:azure-key-vault").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)
    into outputDir
}

task copyTesseraIntoAzureDist(type: Copy) {
    def tesseraName = file(project(":tessera-dist").distZip.outputs.files.getFiles()[0]).getName().replaceFirst("\\.zip","")
    project.logger.lifecycle(tesseraName)

    def tesseraDir = file("${buildDir}/unpacked/dist/${tesseraName}")


    def distname = file(project(":key-vault:azure-key-vault").distZip.outputs.files.getFiles()[0]).getName().replaceFirst("\\.zip","")

    def outputDir = file("${buildDir}/unpacked/dist/${distname}")
    from tesseraDir  into outputDir

}

task unzipAwsKeyVault(type: Copy) {
    def zipFile = file(project(":key-vault:aws-key-vault").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)
    into outputDir

}

task unzipHashicorpKeyVault(type: Copy) {
    def zipFile = file(project(":key-vault:hashicorp-key-vault").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)
    into outputDir
}

task unzipTessera(type: Copy) {
    def zipFile = file(project(":tessera-dist").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)

//    exclude "**/jffi-*-native.jar"

    into outputDir
}

task unzipEnclave(type: Copy) {
    def zipFile = file(project(":enclave:enclave-jaxrs").distZip.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/unpacked/dist")
    from zipTree(zipFile)

    exclude "**/jffi-*-native.jar"

    into outputDir
}

task unzipDdl(type:Copy) {
    def zipFile = file(project(":ddls").jar.outputs.files.getFiles()[0])
    def outputDir = file("${buildDir}/resources/test/ddls")
    from zipTree(zipFile)
    into outputDir
}

task copyJdbcJars(type:Copy) {

    def hsqldbJar = project.configurations.testCompileClasspath.find { it.name.startsWith("hsqldb")}
    def sqliteJar = project.configurations.testCompileClasspath.find { it.name.startsWith("sqlite")}

    def outputDir = file("${buildDir}/ext")
    from hsqldbJar
    into outputDir

    from sqliteJar
    into outputDir
}


//task list(dependsOn: configurations.compileClasspath) {
//    doLast {
//        println "classpath = ${configurations.testCompileClasspath.collect { File file -> file.name }}"
//    }
//}


compileJava {
    include("**/module-info.java")
}

copyTesseraIntoAzureDist.dependsOn unzipTessera,unzipAzureKeyVault

test.dependsOn clean,copyJdbcJars,unzipDdl,unzipEnclave,copyTesseraIntoAzureDist
        //unzipAzureKeyVault
//unzipAwsKeyVault
//unzipAwsKeyVault,unzipAzureKeyVault,unzipHashicorpKeyVault

